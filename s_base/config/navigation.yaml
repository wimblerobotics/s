amcl: # See: https://assets.researchsquare.com/files/rs-225880/v1_covered.pdf?c=1631856303
  ros__parameters:
    use_sim_time: True
    alpha1: 0.20 #0.2  # Expected process noise in odometry’s rotation estimate from rotation.
    alpha2: 0.20 #0.2  # Expected process noise in odometry’s rotation estimate from translation.
    alpha3: 0.20 #0.2  # Expected process noise in odometry’s translation estimate from translation.
    alpha4: 0.20 #0.2  # Expected process noise in odometry’s translation estimate from rotation.
    alpha5: 0.20       # For Omni models only: translation noise.
    base_frame_id: "base_footprint"
    beam_skip_distance: 0.5 # Ignore beams that most particles disagree with in Likelihood field model. Maximum distance to consider skipping for (m).
    beam_skip_error_threshold: 0.9  # Percentage of beams after not matching map to force full update due to bad convergance.
    beam_skip_threshold: 0.3  # Percentage of beams required to skip.
    do_beamskip: false  # Whether to do beam skipping in Likelihood field model.
    global_frame_id: "map"  # The name of the coordinate frame published by the localization system.
    lambda_short: 0.1   # Exponential decay parameter for z_short part of model.
    laser_likelihood_max_dist: 2.0 # Maximum distance to do obstacle inflation on map, for use in likelihood_field model.
    laser_max_range: -1.0   # Maximum scan range to be considered, -1.0 will cause the laser’s reported maximum range to be used.
    laser_min_range: -1.0   # Minimum scan range to be considered, -1.0 will cause the laser’s reported minimum range to be used.
    laser_model_type: "likelihood_field" # Which model to use, either beam, likelihood_field, or likelihood_field_prob.
    max_beams: 450          # How many evenly-spaced beams in each scan to be used when updating the filter.
    max_particles: 2000     # Maximum allowed number of particles.
    min_particles: 1000     # Minimum allowed number of particles.
    odom_frame_id: "odom"   # Which frame to use for odometry.
    pf_err: 0.05            # Particle Filter population error.  
    pf_z: 0.99              # Particle filter population density.
    recovery_alpha_fast: 0.01  # Exponential decay rate for the fast average weight filter, used in deciding when to recover by adding random poses.
    recovery_alpha_slow: 0.001 # Exponential decay rate for the slow average weight filter, used in deciding when to recover by adding random poses. A good value might be 0.001.
    resample_interval: 1    # Number of filter updates required before resampling.
    robot_model_type: "nav2_amcl::DifferentialMotionModel" # The fully-qualified type of the plugin class.
    save_pose_rate: 0.5     # Maximum rate (Hz) at which to store the last estimated pose and covariance to the parameter server.
    sigma_hit: 0.2          # Standard deviation for Gaussian model used in z_hit part of the model.
    tf_broadcast: true      # Set this to false to prevent amcl from publishing the transform between the global frame and the odometry frame.
    transform_tolerance: 0.3 # Time with which to post-date the transform that is published, to indicate that this transform is valid into the future.
    # One degree = 0.017453278 radians
    update_min_a: 0.01745   # Rotational movement required before performing a filter update.
    update_min_d: 0.05      # Translational movement required before performing a filter update.
    z_hit: 0.95             # Mixture weight for z_hit part of model, sum of all used z weight must be 1. 
    z_max: 0.001            # Mixture weight for z_max part of model, sum of all used z weight must be 1. Beam uses all 4, likelihood model uses z_hit and z_rand.
    z_rand: 0.05            # Mixture weight for z_rand part of model, sum of all used z weight must be 1.
    z_short: 0.001          # Mixture weight for z_short part of model, sum of all used z weight must be 1.
    scan_topic: scan
    set_initial_pose: true # Causes AMCL to set initial pose from the initial_pose* parameters instead of waiting for the initial_pose message.
    initial_pose:
      x: 1.0 #8.0 #8.25
      y: 1.0 #3.0 #3.145
      yaw:  1.571 # 1.571

bt_navigator:
  ros__parameters:
    use_sim_time: True
    global_frame: map
    robot_base_frame: base_link
    odom_topic: /odom
    bt_loop_duration: 10
    default_server_timeout: 20
    # 'default_nav_through_poses_bt_xml' and 'default_nav_to_pose_bt_xml' are use defaults:
    # nav2_bt_navigator/navigate_to_pose_w_replanning_and_recovery.xml
    # nav2_bt_navigator/navigate_through_poses_w_replanning_and_recovery.xml
    # They can be set here or via a RewrittenYaml remap from a parent launch file to Nav2.
    plugin_lib_names:
    - nav2_compute_path_to_pose_action_bt_node
    - nav2_compute_path_through_poses_action_bt_node
    - nav2_smooth_path_action_bt_node
    - nav2_follow_path_action_bt_node
    - nav2_spin_action_bt_node
    - nav2_wait_action_bt_node
    - nav2_assisted_teleop_action_bt_node
    - nav2_back_up_action_bt_node
    - nav2_drive_on_heading_bt_node
    - nav2_clear_costmap_service_bt_node
    - nav2_is_stuck_condition_bt_node
    - nav2_goal_reached_condition_bt_node
    - nav2_goal_updated_condition_bt_node
    - nav2_globally_updated_goal_condition_bt_node
    - nav2_is_path_valid_condition_bt_node
    - nav2_initial_pose_received_condition_bt_node
    - nav2_reinitialize_global_localization_service_bt_node
    - nav2_rate_controller_bt_node
    - nav2_distance_controller_bt_node
    - nav2_speed_controller_bt_node
    - nav2_truncate_path_action_bt_node
    - nav2_truncate_path_local_action_bt_node
    - nav2_goal_updater_node_bt_node
    - nav2_recovery_node_bt_node
    - nav2_pipeline_sequence_bt_node
    - nav2_round_robin_node_bt_node
    - nav2_transform_available_condition_bt_node
    - nav2_time_expired_condition_bt_node
    - nav2_path_expiring_timer_condition
    - nav2_distance_traveled_condition_bt_node
    - nav2_single_trigger_bt_node
    - nav2_goal_updated_controller_bt_node
    - nav2_is_battery_low_condition_bt_node
    - nav2_navigate_through_poses_action_bt_node
    - nav2_navigate_to_pose_action_bt_node
    - nav2_remove_passed_goals_action_bt_node
    - nav2_planner_selector_bt_node
    - nav2_controller_selector_bt_node
    - nav2_goal_checker_selector_bt_node
    - nav2_controller_cancel_bt_node
    - nav2_path_longer_on_approach_bt_node
    - nav2_wait_cancel_bt_node
    - nav2_spin_cancel_bt_node
    - nav2_back_up_cancel_bt_node
    - nav2_assisted_teleop_cancel_bt_node
    - nav2_drive_on_heading_cancel_bt_node

bt_navigator_navigate_through_poses_rclcpp_node:
  ros__parameters:
    use_sim_time: True

bt_navigator_navigate_to_pose_rclcpp_node:
  ros__parameters:
    use_sim_time: True

controller_server:
  ros__parameters:
    # See "Notes to Users" in https://index.ros.org/p/nav2_mppi_controller/github-ros-planning-navigation2/
    # Note, time_steps * vx_max * model_dt determines what local costmap size should be.
    # E.g. 241800 * 0.25 * 0.033 = 1.485 costmap radius.
    use_sim_time: True
    use_realtime_priority: True # Note, requires edit of /etc/security/limits.conf
    controller_frequency: 30.0 # Frequency to run controller (Hz).
    min_x_velocity_threshold: 0.001 # Set x-vel to zero if less than this.
    min_y_velocity_threshold: 0.5 # Set y-vel to zero if less than this.
    min_theta_velocity_threshold: 0.001 # Set z-vel to zero if less than this.
    failure_tolerance: 0.3 # Max duration controller plugin can fail before FollowPath action fails.
    progress_checker_plugin: "progress_checker" # Mapped name for progress checker plugin for checking progress made by robot.
    goal_checker_plugins: ["general_goal_checker"] # Mapped name for goal checker plugin for checking goal is reached. 
    current_goal_checker: ["general_goal_checker"]
    controller_plugins: ["FollowPath"] # List of mapped names for controller plugins for processing requests and parameters.

    # Progress checker parameters
    progress_checker:
      plugin: "nav2_controller::SimpleProgressChecker"
      required_movement_radius: 0.5 # Minimum amount a robot must move to be progressing to goal (m).
      movement_time_allowance: 10.0 # Maximum amount of time a robot has to move the minimum radius (s).
    general_goal_checker:
      stateful: True # Whether to check for XY position tolerance after rotating to goal orientation
          # in case of minor localization changes.
      plugin: "nav2_controller::SimpleGoalChecker"
      xy_goal_tolerance: 0.1016 # 4 inches Tolerance to meet goal completion criteria (m).
      yaw_goal_tolerance: 0.0872 # 5 degrees Tolerance to meet goal completion criteria (rad).
    FollowPath:
      plugin: "nav2_mppi_controller::MPPIController"
      time_steps: 60
      model_dt: 0.033333333 # Set to inverse of controller_frequency. No larger than 0.05.
      batch_size: 2000
      vx_std: 0.2
      vy_std: 0.2
      wz_std: 0.4
      vx_max: 0.25
      vx_min: -0.05
      vy_max: 0.5 # Unused for differential model.
      wz_max: 0.07
      iteration_count: 1
      prune_distance: 1.7
      transform_tolerance: 0.3
      temperature: 0.3
      gamma: 0.015
      motion_model: "DiffDrive"
      visualize: false # True will slow down, useful only for debugging.
      reset_period: 1.0 # (only in Humble)
      regenerate_noises: false
      TrajectoryVisualizer:
        trajectory_step: 5
        time_step: 3
      AckermannConstraints:
        min_turning_r: 0.2
      critics: [
        "ConstraintCritic",
        "GoalCritic",
        "GoalAngleCritic",
        "ObstaclesCritic",
        "PathAlignCritic",
        "PathFollowCritic",
        "PathAngleCritic",
        "PreferForwardCritic"]
      ConstraintCritic:
        # This critic penalizes trajectories that have components outside of the set dynamic or kinematic constraints
        enabled: true
        cost_power: 1 # Power order to apply to term.
        cost_weight: 4.0 # Weight to apply to critic term.
      CostCritic:
        # incentivizes navigating away from obstacles and critical collisions.
        enabled: true
        cost_power: 1 # Power order to apply to term.
        cost_weight: 3.81 # Weight to apply to critic term.
        critical_cost: 300.0 # Cost to apply to a pose with any point in in inflated space to prefer distance from obstacles.
        consider_footprint: true # Whether to use point cost.
        collision_cost: 1000000.0 # Cost to apply to a true collision in a trajectory.
        near_goal_distance: 1.0 #  Distance (m) near goal to stop applying preferential obstacle term.
        trajectory_point_step: 2 # The step to take in trajectories for evaluating them in the critic.
      GoalCritic:
        # This critic incentivizes navigating spatially towards the goal when in reasonable proximity to goal.
        enabled: true
        cost_power: 1 # Power order to apply to term.
        cost_weight: 15.0 # Weight to apply to critic term.
        threshold_to_consider: 0.5 # Minimal distance (m) between robot and goal above which goal distance cost considered,
      GoalAngleCritic:
        # This critic incentivizes navigating to achieve the angle of the goal posewhen in reasonable proximity to goal.
        enabled: true
        cost_power: 1 # Power order to apply to term.
        cost_weight: 3.0 # Weight to apply to critic term.
        threshold_to_consider: 0.5 # Minimal distance (m) between robot and goal above which angle goal cost considered.
      ObstaclesCritic:
        # This critic incentivizes navigating away from obstacles and critical collisions.
        enabled: true
        cost_power: 1 # Power order to apply to term.
        repulsion_weight: 4.0 # Weight to apply to critic for generally preferring routes in lower cost space. 
        critical_weight: 40.0 # Weight to apply to critic for near collisions closer than collision_margin_distancE.
        consider_footprint: true # Whether to use point cost
        collision_cost: 10000.0 # Cost to apply to a true collision in a trajectory.
        collision_margin_distance: 0.0508 # Margin distance (m) from collision to apply severe penalty,
            # similar to footprint inflation. Between 0.05-0.2 is reasonable. 
        near_goal_distance: 0.2 # Distance (m) near goal to stop applying preferential obstacle term.
        inflation_radius: 0.3 # Radius to inflate costmap around lethal obstacles. 
            # This should be the same as for your inflation layer 
        cost_scaling_factor: 3.0 # Exponential decay factor across inflation radius. 
            # This should be the same as for your inflation layer 
      PathAlignCritic:
        # This critic incentivizes aligning with the global path, if relevant. 
        # It does not implement path following behavior
        enabled: true
        cost_power: 1 # Power order to apply to term.
        cost_weight: 20.0 # Weight to apply to critic term.
        max_path_occupancy_ratio: 0.05 # 0-1 (100%) max portion of path that can be occupied before
            # before critic not considered, allowing obstacle and path follow.
        trajectory_point_step: 4 # Step to take in trajectors before evaluating them.
        threshold_to_consider: 0.5 # If less than this distance to goal, ignore this critic.
        offset_from_furthest: 10 # Candidate trajectories must be far enough away for consideration.
        use_path_orientations: true # Set false of SMAC planner does not provide.
      PathAngleCritic:
        # This critic penalizes trajectories at a high relative angle to the path. 
        # This helps the robot make sharp turns when necessary due to large accumulated angular errors.
        enabled: true
        cost_power: 1 # Power order to apply to term.
        cost_weight: 30.0 # Weight to apply to critic term.
        offset_from_furthest: 8 # Candidate trajectories must be far enough away for consideration.
        threshold_to_consider: 0.5 # If less than this distance to goal, ignore this critic.
        max_angle_to_furthest: 0.25 # Angular distance (rad) between robot and goal above which path angle cost starts being considered
        mode: 2 # Enum type for mode of operations
            # 0: Forward pref.
            # 1: No pref.
            # 2: Consider feasible path orientation (e.g. from SMAC planner).
      PathFollowCritic:
        # This critic incentivizes making progress along the path. 
        # This is what drives the robot forward along the path.
        enabled: true
        cost_power: 1 # Power order to apply to term.
        cost_weight: 40.0 # Weight to apply to critic term.
        offset_from_furthest: 6 # Number of path points after furthest one any trajectory achieves to drive path tracking relative to.
        threshold_to_consider: 1.4 # If less than this distance to goal, ignore this critic.
            # Set to same as GoalCritic.
      PreferForwardCritic:
        # This critic incentivizes moving in the forward direction, rather than reversing.
        enabled: true
        cost_power: 1 # Power order to apply to term.
        cost_weight: 2.0 # Weight to apply to critic term.
        threshold_to_consider: 0.5 # If less than this distance to goal, ignore this critic.
      # TwirlingCritic:
        # This critic penalizes unnecessary ‘twisting’ with holonomic vehicles. It adds a constraint on the rotation angle to keep it consistent.
      #   enabled: true
      #   twirling_cost_power: 1
      #   twirling_cost_weight: 10.0

local_costmap:
  local_costmap:
    ros__parameters:
      update_frequency: 5.0
      publish_frequency: 2.0
      footprint_padding: 0.0
      footprint: "[[-0.260, -0.170], 
                   [-0.260, 0.170], [-0.110, 0.170], [-0.110, 0.205], [0.110, 0.205], [0.110, 0.170], [0.290, 0.170],
                   [0.290, -0.170],
                   [0.110, -0.170], [0.110, -0.205], [-0.110, -0.205], [-0.110, -0.170]]"
      global_frame: odom
      robot_base_frame: base_link
      use_sim_time: False
      rolling_window: true
      transform_tolerance: 0.3
      width: 3
      height: 3
      resolution: 0.0508
      plugins: ["range_layer", "obstacle_layer", "inflation_layer"]
      # plugins: ["range_layer", "voxel_layer", "inflation_layer"]
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 7.0
        inflation_radius: 0.1
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: True
        footprint_clearing_enabled: True
        max_obstacle_height: 2.0
        combination_method: 1 # 0 => Overwrite, 1 => >Max, 2 => MaxWithoutUnknownOverwrite
        observation_sources: scan oakd_left_obstacle oakd_right_obstacle
        scan:
          topic: /scan
          expected_update_rate: 10.0
          data_type: "LaserScan"
          min_obstacle_height: 0.0
          max_obstacle_height: 2.0
          inf_is_valid: False
          clearing: False ###True
          marking: True
          obstacle_max_range: 5.0
          obstacle_min_range: 0.2
          raytrace_max_range: 5.0
          raytrace_min_range: 0.0
        oakd_left_obstacle: 
          topic: /oakd_left/stereo/points
          data_type: "PointCloud2"
          max_obstacle_height: 2.0
          min_obstacle_height: 0.01
          obstacle_max_range: 5.0
          obstacle_min_range: 0.0
          clearing: False
          marking: True
        oakd_right_obstacle:
          topic: /oakd_right/stereo/points
          data_type: "PointCloud2"
          max_obstacle_height: 2.0
          min_obstacle_height: 0.01
          obstacle_max_range: 5.0
          obstacle_min_range: 0.0
          clearing: False
          marking: True
        map_subscribe_transient_local: True
      range_layer:
        buffer_size: 10
        clear_after_reading: True
        clear_on_max_reading: True ##
        clear_threshold: 0.2 ##
        enabled: True ##
        inf_is_invalid: False
        input_sensor_type: "All" ##
        mark_threshold: 0.8 ##
        max_distance: 1.0
        min_distance: 0.2
        observation_persistence: 2.0
        plugin: "nav2_costmap_2d::RangeSensorLayer"
        topics: ##
          [
            "/sonar0Sensor",
            "/sonar1Sensor",
            "/sonar2Sensor",
            "/sonar3Sensor",
          ]
        transform_tolerance: 0.3
      always_send_full_costmap: True

global_costmap:
  global_costmap:
    ros__parameters:
      update_frequency: 5.0
      publish_frequency: 1.0
      global_frame: map
      robot_base_frame: base_link
      use_sim_time: True
      footprint_padding: 0.0
      footprint: "[[-0.260, -0.170], 
                   [-0.260, 0.170], [-0.110, 0.170], [-0.110, 0.205], [0.110, 0.205], [0.110, 0.170], [0.290, 0.170],
                   [0.290, -0.170],
                   [0.110, -0.170], [0.110, -0.205], [-0.110, -0.205], [-0.110, -0.170]]"
      resolution: 0.0508
      track_unknown_space: true
      plugins: ["static_layer", "obstacle_layer", "inflation_layer", ]
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 3.0
        inflation_radius: 0.1
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: True
        footprint_clearing_enabled: True
        max_obstacle_height: 2.0
        combination_method: 1 # 0 => Overwrite, 1 => >Max, 2 => MaxWithoutUnknownOverwrite
        observation_sources: scan oakd_left_obstacle oakd_right_obstacle
        scan:
          topic: /scan
          expected_update_rate: 10.0
          data_type: "LaserScan"
          min_obstacle_height: 0.0
          max_obstacle_height: 2.0
          inf_is_valid: False
          clearing: False ###True
          marking: True
          obstacle_max_range: 5.0
          obstacle_min_range: 0.2
          raytrace_max_range: 5.0
          raytrace_min_range: 0.0
        oakd_left_obstacle: 
          topic: /oakd_left/stereo/points
          data_type: "PointCloud2"
          max_obstacle_height: 2.0
          min_obstacle_height: 0.01
          obstacle_max_range: 5.0
          obstacle_min_range: 0.0
          clearing: False
          marking: True
        oakd_right_obstacle:
          topic: /oakd_right/stereo/points
          data_type: "PointCloud2"
          max_obstacle_height: 2.0
          min_obstacle_height: 0.01
          obstacle_max_range: 5.0
          obstacle_min_range: 0.0
          clearing: False
          marking: True
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        map_subscribe_transient_local: True
      always_send_full_costmap: True
      transform_tolerance: 0.3

map_server:
  ros__parameters:
    use_sim_time: True
    # Overridden in launch by the "map" launch configuration or provided default value.
    # To use in yaml, remove the default "map" value in the tb3_simulation_launch.py file & provide full path to map below.
    yaml_filename: ""

map_saver:
  ros__parameters:
    use_sim_time: True
    save_map_timeout: 5.0
    free_thresh_default: 0.25
    occupied_thresh_default: 0.65
    map_subscribe_transient_local: True

planner_server:
  ros__parameters:
    planner_plugins: ["GridBased"]
    use_sim_time: True

    GridBased:
      plugin: "nav2_smac_planner/SmacPlannerLattice"
      allow_unknown: true                 # Allow traveling in unknown space
      tolerance: 0.25                     # dist-to-goal heuristic cost (distance) for valid tolerance endpoints if exact goal cannot be found.
      max_iterations: 1000000             # Maximum total iterations to search for before failing (in case unreachable), set to -1 to disable
      max_on_approach_iterations: 1000    # Maximum number of iterations after within tolerances to continue to try to find exact solution
      max_planning_time: 5.0              # Max time in s for planner to plan, smooth
      analytic_expansion_ratio: 3.5       # The ratio to attempt analytic expansions during search for final approach.
      analytic_expansion_max_length: 3.0  # For Hybrid/Lattice nodes The maximum length of the analytic expansion to be considered valid to prevent unsafe shortcutting
      analytic_expansion_max_cost: 200.0  # The maximum single cost for any part of an analytic expansion to contain and be valid, except when necessary on approach to goal
      analytic_expansion_max_cost_override: false  #  Whether or not to override the maximum cost setting if within critical distance to goal (ie probably required)
      reverse_penalty: 2.0                # Penalty to apply if motion is reversing, must be => 1
      change_penalty: 0.05                # Penalty to apply if motion is changing directions (L to R), must be >= 0
      non_straight_penalty: 1.05          # Penalty to apply if motion is non-straight, must be => 1
      cost_penalty: 2.0                   # Penalty to apply to higher cost areas when adding into the obstacle map dynamic programming distance expansion heuristic. This drives the robot more towards the center of passages. A value between 1.3 - 3.5 is reasonable.
      rotation_penalty: 1.0 ##5.0               # Penalty to apply to in-place rotations, if minimum control set contains them
      retrospective_penalty: 0.015
      lattice_filepath: "/home/ros/s_ws/install/s_base/share/s_base/config/lattices.json" # The filepath to the state lattice graph
      lookup_table_size: 20.0             # Size of the dubin/reeds-sheep distance window to cache, in meters.
      cache_obstacle_heuristic: false     # Cache the obstacle map dynamic programming distance expansion heuristic between subsiquent replannings of the same goal location. Dramatically speeds up replanning performance (40x) if costmap is largely static.
      allow_reverse_expansion: false      # If true, allows the robot to use the primitives to expand in the mirrored opposite direction of the current robot's orientation (to reverse).
      smooth_path: True                   # If true, does a simple and quick smoothing post-processing to the path
      smoother:
        max_iterations: 1000
        w_smooth: 0.3
        w_data: 0.2
        tolerance: 1.0e-10
        do_refinement: true
        refinement_num: 2
    # expected_planner_frequency: 30.0
    # use_sim_time: True
    # planner_plugins: ["GridBased"]
    # GridBased:
    #   plugin: "nav2_navfn_planner/NavfnPlanner"
    #   tolerance: 0.5
    #   use_astar: false
    #   allow_unknown: true

smoother_server:
  ros__parameters:
    use_sim_time: True
    smoother_plugins: ["simple_smoother"]
    simple_smoother:
      robot_base_frame: base_footprint
      plugin: "nav2_smoother::SimpleSmoother"
      tolerance: 1.0e-10
      max_its: 1000
      do_refinement: True

behavior_server:
  ros__parameters:
    costmap_topic: local_costmap/costmap_raw
    footprint_topic: local_costmap/published_footprint
    cycle_frequency: 20.0
    behavior_plugins: ["spin", "backup", "drive_on_heading", "assisted_teleop", "wait"]
    spin:
      plugin: "nav2_behaviors/Spin"
    backup:
      plugin: "nav2_behaviors/BackUp"
    drive_on_heading:
      plugin: "nav2_behaviors/DriveOnHeading"
    wait:
      plugin: "nav2_behaviors/Wait"
    assisted_teleop:
      plugin: "nav2_behaviors/AssistedTeleop"
    global_frame: odom
    robot_base_frame: base_link
    transform_tolerance: 0.3
    use_sim_time: true
    simulate_ahead_time: 2.0
    max_rotational_vel: 1.0
    min_rotational_vel: 0.017
    rotational_acc_lim: 0.2

robot_state_publisher:
  ros__parameters:
    use_sim_time: True

waypoint_follower:
  ros__parameters:
    use_sim_time: True
    loop_rate: 20
    stop_on_failure: false
    waypoint_task_executor_plugin: "wait_at_waypoint"
    wait_at_waypoint:
      plugin: "nav2_waypoint_follower::WaitAtWaypoint"
      enabled: True
      waypoint_pause_duration: 200

velocity_smoother:
  ros__parameters:
    use_sim_time: True
    use_realtime_priority: True
    smoothing_frequency: 50.0 
    scale_velocities: False
    feedback: "OPEN_LOOP"
    max_velocity: [0.2, 0.0, 0.1]
    min_velocity: [-0.2, 0.0, -0.1]
    max_accel: [0.1, 0.0, 0.1]
    max_decel: [-0.1, 0.0, -0.1]
    odom_topic: "odom"
    odom_duration: 0.2
    deadband_velocity: [0.0, 0.0, 0.0]
    velocity_timeout: 1.0